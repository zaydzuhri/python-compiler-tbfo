S -> S newline S | NL | S1
S1 -> S1 newline S1 | IMPORT | IMPORTAS | CLASS | DEF | FUNCTION | FUNCTION NL | STRING | COMMENT | RAISE | WHILE | FOR | VARIABLE ASSIGNMENT VARIABLE NL | VARIABLE ASSIGNMENT EXPRESSION NL | IF | VARIABLE | VARIABLE ASSIGNMENT VARIABLE | VARIABLE ASSIGNMENT EXPRESSION | INSTANCE | METHOD
SFUNCTION -> S1 | SFUNCTION newline SFUNCTION | RETURN | IFFUNCTION | newline SFUNCTION
ARGUMENT -> VARIABLE | INSTANCE | METHOD | FUNCTION | VARIABLE , ARGUMENT | INSTANCE , ARGUMENT | METHOD , ARGUMENT | FUNCTION , ARGUMENT
ASSIGNMENT -> + = | - = | * = | / = | * * = | / / = | & = | ^ = | % = | =
BOOLEAN -> true | false
BREAK -> break NL | break
CLASS -> class VARIABLE : newline S1 | class VARIABLE ( INSTANCE ) : newline S1
COMMENT -> # STRCONTENT NL | " " " MULSTR " " " NL | ' ' ' MULSTR ' ' ' NL | " " " MULSTR " " " | ' ' ' MULSTR ' ' '
CONTINUE -> continue NL | continue
DEF -> def FUNCTION : newline SFUNCTION | def FUNCTION : newline S1 RETURN | def FUNCTION : newline PASS
ELIF -> elif VARIABLE : newline S1 | elif ( VARIABLE ) : newline S1 | ELIF ELIF | ELIF ELSE | ELIF IN | ELIF BREAK | ELIF CONTINUE | ELIF PASS
ELIFFUNCTION -> elif VARIABLE : S RETURN | elif ( VARIABLE ) : S RETURN | elif VARIABLE : SFUNCTION | elif ( VARIABLE ) : SFUNCTION | elif VARIABLE : NL RETURN | elif ( VARIABLE ) : NL RETURN | ELIFFUNCTION ELSEFUNCTION | ELIF ELSEFUNCTION | ELIF ELIFFUNCTION | ELIF | ELIF IFFUNCTION | ELIFFUNCTION IF | ELIFFUNCTION IFFUNCTION
ELSE -> else : newline S1 | else : newline PASS
ELSEFUNCTION -> else : S RETURN | else : NL RETURN | else : SFUNCTION | else : newline PASS
EXPRESSION -> VARIABLE OPERATOR VARIABLE | VARIABLE OPERATOR EXPRESSION
FOR -> for VARIABLE in FUNCTION : newline S1 | for VARIABLE in METHOD : newline S1 | for VARIABLE in VARIABLE : newline S1 | FOR FOR | FOR IN | FOR BREAK | FOR CONTINUE | FOR PASS
FUNCTION -> VARIABLE ( ARGUMENT ) | VARIABLE ( ) | VARIABLE ( FUNCTION )
IF -> if VARIABLE : newline S1 | if ( VARIABLE ) : newline S1 | IF ELIF | IF ELSE | IF IN | IF BREAK | IF CONTINUE | IF PASS | IF IS | if VARIABLE : newline IF | if ( VARIABLE ) : newline IF | IF IF
IFFUNCTION -> IF | if VARIABLE : S RETURN | if ( VARIABLE ) : S RETURN | if VARIABLE : NL RETURN | if ( VARIABLE ) : NL RETURN | if VARIABLE : SFUNCTION | if ( VARIABLE ) : SFUNCTION | IFFUNCTION IFFUNCTION | IFFUNCTION ELIFFUNCTION | IFFUNCTION ELSE | IF IFFUNCTION | IF ELIFFUNCTION | IF ELSEFUNCTION | IFFUNCTION IF | IFFUNCTION ELIF | IFFUNCTION ELSE
IMPORT -> from INSTANCE import VARIABLE NL | import VARIABLE NL
IMPORTAS -> from INSTANCE import VARIABLE as VARIABLE NL | import INSTANCE as VARIABLE NL
IN -> VARIABLE in VARIABLE | VARIABLE in FUNCTION | VARIABLE IN METHOD 
INSTANCE -> variable | variable . INSTANCE
IS -> variable is VARIABLE | variable is VAL
METHOD -> variable . METHOD | variable . FUNCTION
MULSTR -> newline | newline STRCONTENT | STRCONTENT newline | STRCONTENT newline MULSTR
NL -> newline | newline S
NONE -> none
OPERATOR -> + | - | * | / | % | * * | / / | & | ^ | and | or | not | > | < | > = | < = | = = | ! =
PASS -> pass NL | pass
RAISE -> raise VARIABLE NL | raise FUNCTION NL
RETURN -> return | return VARIABLE NL | return VARIABLE | newline RETURN | RETURN RETURN
STRCONTENT -> strcontent | STRCONTENT STRCONTENT | VARIABLE | VAL
STRING -> ' STRCONTENT ' | " STRCONTENT "
VAL -> number | number OPERATOR VAL | NONE | ( VAL ) | FUNCTION | METHOD
VARIABLE -> variable | variable OPERATOR VARIABLE | variable OPERATOR VAL | ( VARIABLE ) | BOOLEAN | STRING | VAL | INSTANCE
WHILE -> while VARIABLE : NL S | while ( VARIABLE ) : NL S | while BOOLEAN : NL S | while ( BOOLEAN ) : NL S | WHILE IS : NL S | WHILE IN : NL S | WHILE BREAK : NL S | WHILE CONTINUE : NL S | WHILE PASS : NL S
WITH -> with FUNCTION as VARIABLE : newline S1